{"ast":null,"code":"var _jsxFileName = \"/home/sanat/Documents/GitHub/music-app/test/src/components/Controls.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './Controls.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Controls = ({\n  songs,\n  currentSongIndex,\n  setCurrentSongIndex,\n  isPlaying,\n  setIsPlaying\n}) => {\n  _s();\n  const audioRef = useRef(new Audio(songs[currentSongIndex].src));\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(songs[currentSongIndex].src);\n    if (isPlaying) {\n      audioRef.current.play().catch(error => {\n        console.error('Error playing the audio:', error);\n      });\n    }\n  }, [currentSongIndex, isPlaying, songs]);\n  const playPauseSong = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play().catch(error => {\n        console.error('Error playing the audio:', error);\n      });\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const nextSong = () => {\n    setCurrentSongIndex(prevIndex => (prevIndex + 1) % songs.length);\n    setIsPlaying(true);\n  };\n  const prevSong = () => {\n    setCurrentSongIndex(prevIndex => (prevIndex - 1 + songs.length) % songs.length);\n    setIsPlaying(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: prevSong,\n      children: \"Previous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: playPauseSong,\n      children: isPlaying ? 'Pause' : 'Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextSong,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Controls, \"+byXHHf22FzALubYzgUeSQRtz1Y=\");\n_c = Controls;\nexport default Controls;\nvar _c;\n$RefreshReg$(_c, \"Controls\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Controls","songs","currentSongIndex","setCurrentSongIndex","isPlaying","setIsPlaying","_s","audioRef","Audio","src","current","pause","play","catch","error","console","playPauseSong","nextSong","prevIndex","length","prevSong","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sanat/Documents/GitHub/music-app/test/src/components/Controls.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './Controls.css';\n\nconst Controls = ({ songs, currentSongIndex, setCurrentSongIndex, isPlaying, setIsPlaying }) => {\n  const audioRef = useRef(new Audio(songs[currentSongIndex].src));\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(songs[currentSongIndex].src);\n    if (isPlaying) {\n      audioRef.current.play().catch((error) => {\n        console.error('Error playing the audio:', error);\n      });\n    }\n  }, [currentSongIndex, isPlaying, songs]);\n\n  const playPauseSong = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play().catch((error) => {\n        console.error('Error playing the audio:', error);\n      });\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const nextSong = () => {\n    setCurrentSongIndex((prevIndex) => (prevIndex + 1) % songs.length);\n    setIsPlaying(true);\n  };\n\n  const prevSong = () => {\n    setCurrentSongIndex((prevIndex) => (prevIndex - 1 + songs.length) % songs.length);\n    setIsPlaying(true);\n  };\n\n  return (\n    <div className=\"controls\">\n      <button onClick={prevSong}>Previous</button>\n      <button onClick={playPauseSong}>{isPlaying ? 'Pause' : 'Play'}</button>\n      <button onClick={nextSong}>Next</button>\n    </div>\n  );\n};\n\nexport default Controls;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,KAAK;EAAEC,gBAAgB;EAAEC,mBAAmB;EAAEC,SAAS;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC9F,MAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAIW,KAAK,CAACP,KAAK,CAACC,gBAAgB,CAAC,CAACO,GAAG,CAAC,CAAC;EAE/Db,SAAS,CAAC,MAAM;IACdW,QAAQ,CAACG,OAAO,CAACC,KAAK,CAAC,CAAC;IACxBJ,QAAQ,CAACG,OAAO,GAAG,IAAIF,KAAK,CAACP,KAAK,CAACC,gBAAgB,CAAC,CAACO,GAAG,CAAC;IACzD,IAAIL,SAAS,EAAE;MACbG,QAAQ,CAACG,OAAO,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;QACvCC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACZ,gBAAgB,EAAEE,SAAS,EAAEH,KAAK,CAAC,CAAC;EAExC,MAAMe,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIZ,SAAS,EAAE;MACbG,QAAQ,CAACG,OAAO,CAACC,KAAK,CAAC,CAAC;IAC1B,CAAC,MAAM;MACLJ,QAAQ,CAACG,OAAO,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;QACvCC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,CAAC,CAAC;IACJ;IACAT,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EAED,MAAMa,QAAQ,GAAGA,CAAA,KAAM;IACrBd,mBAAmB,CAAEe,SAAS,IAAK,CAACA,SAAS,GAAG,CAAC,IAAIjB,KAAK,CAACkB,MAAM,CAAC;IAClEd,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMe,QAAQ,GAAGA,CAAA,KAAM;IACrBjB,mBAAmB,CAAEe,SAAS,IAAK,CAACA,SAAS,GAAG,CAAC,GAAGjB,KAAK,CAACkB,MAAM,IAAIlB,KAAK,CAACkB,MAAM,CAAC;IACjFd,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,oBACEN,OAAA;IAAKsB,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBvB,OAAA;MAAQwB,OAAO,EAAEH,QAAS;MAAAE,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC5C5B,OAAA;MAAQwB,OAAO,EAAEP,aAAc;MAAAM,QAAA,EAAElB,SAAS,GAAG,OAAO,GAAG;IAAM;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACvE5B,OAAA;MAAQwB,OAAO,EAAEN,QAAS;MAAAK,QAAA,EAAC;IAAI;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAACrB,EAAA,CAzCIN,QAAQ;AAAA4B,EAAA,GAAR5B,QAAQ;AA2Cd,eAAeA,QAAQ;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}